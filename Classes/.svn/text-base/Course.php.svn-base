<?php
/**
 * Course.php
 * @author Brian Astrup Mikkelsen
 * @email brian@mikkelsen.com
 * @year 2011
 */

require_once(dirname(__FILE__) . '/../../../config.php');
require_once(dirname(__FILE__) . '/Role.php');

class Course {
    /*
     * StdClass Object, course table data
     */
    private $data;
    
    /*
     * Course context object
     */
    private $context;

    /*
     * Abstration layer, contains roleid's
     */
    private $role;

    public function __construct($course){
        global $DB;
        
        if( is_object($course)) { 
            $this->data = $course;
            $course = (int) $course->id;
        }

        if( ! is_numeric($course)){
            throw new Exception('Not an integer');
        }

        if( ! $this->data ){
            $this->data = $DB->get_record('course',array('id'=>$course));
            if( ! $this->data){
                throw new Exception('Could not load course with id: '.$course);
            } 
        }

        $this->context = context_course::instance($this->data->id);
        
        // OUTDATED: $this->context = get_context_instance(CONTEXT_COURSE, $this->data->id);
        if(! $this->context) {
            throw new Exception('Could not get course context');
        }
        

        $this->role = new Role();
        
    }

    /**
     * Property implementation
     * $obj->random_property calls $this->get_random_property()
     */
    public function __get($var){
        $getter = sprintf('get_%s',$var);
        if( method_exists($this,$getter)){
            return $this->$getter();
        }
        return $this->data->$var;
    }

    /**
     * Property implementation
     * $obj->random_property calls $this->set_random_property()
     */
    public function __set($var,$value){
        $setter = sprintf('set_%s',$var);
        if( method_exists($this,$setter)){
            return $this->$setter($value);
        }
    }

    /**
     * Property: teachers;
     */
    private function get_teachers(){
        return $this->_get_users_from_roleid($this->role->teacher);
    }

    /**
     * Property: secretaries;
     */
    private function get_secretaries(){
        return $this->_get_users_from_roleid($this->role->secretary);
    }

    /**
     * Get all users with a specific role on current context
     * @param int $roleid
     * @returns Array<StdClass> : users
     */
    private function _get_users_from_roleid($roleid){
        $roleobj = get_record('role', 'id',$roleid);
        $res =  get_users_from_role_on_context($roleobj, $this->context);
        if( ! $res ) return array();

        $users = array();
        foreach($res as $obj){
             $users[] = get_record('user', 'id',$obj->userid);
        }
        return $users;
    }
}
